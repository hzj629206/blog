[{"content":"默认情况下（SVIP 会员），百度网盘的网页端和桌面客户端在新加坡访问都比较慢。经过一番探索，找到了可用的 CDN 服务器。\n使用方法是修改 hosts 文件，这里用 MacOS 举例是修改 /etc/hosts 文件。\n1 2 3 4 5 6 7 # 查看百度香港的IP段：https://whois.ipip.net/AS55967 # *.baidupcs.com 可以使用 45.113.192.84 45.113.192.84 bjbgp01.baidupcs.com # *.pcs.baidu.com 可以使用 45.113.192.98 45.113.192.98 d.pcs.baidu.com # pan.baidu.com 使用 45.113.192.97 45.113.192.97 pan.baidu.com 实测客户端单个文件下载速度可以达到10M以上，5个下载任务总的下载速度最大可以达到60M。\n注：修改 hosts 的方法不适用于 Alist 挂载百度网盘。Alist 挂载百度网盘可以结合 Rclone 进行多线程下载加速\nAlist 添加百度网盘 Rclone 添加 Alist 为 WebDAV Rclone 使用参数 --multi-thread-streams=16 ","date":"2024-11-13T16:33:34+08:00","permalink":"https://ogr.xyz/p/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%8A%A0%E9%80%9Fcdn/","title":"百度网盘新加坡加速CDN"},{"content":"最近对思源笔记和 Obsidian 进行了一些了解，二者都是很好的离线个人知识库软件，并且二者都支持插件系统。在研究图床插件的过程中涉及到了 CORS 问题。\n思源笔记和 Obsidian 都是基于 Electron 框架构建的软件，可以认为其中内置了 Chrominum 浏览器和 Node.js 环境。\nNode.js 是服务器端，不存在 CORS 问题。 浏览器环境存在 CORS 问题。 同样是 JavaScript 编程语言，Node.js 环境下进行 HTTP 请求和浏览器环境下进行 HTTP 请求是不一样的。\nNode.js 环境下有内置的 http 和 https 包。 浏览器环境下有 XMLHttpRequest API 和 Fetch API。 当然上述只是最底层的API，在应用层面有各种第三方库进行封装，提供更加易用的接口。在浏览器端，传统的典型是 jQuery，新锐的典型是 Axios。\nCORS 基础 说到 CORS 前，需要了解“同源”概念。同源即协议、域名和端口三者完全相同。浏览器使用同源政策，目的是为了保证用户信息的安全，防止恶意的网站窃取数据，不同源的访问会受到限制（主要是 Cookie / Local Storage 访问、iframe DOM 访问、发起 HTTP 请求）。\n对于 HTML 标签的外部链接如 \u0026lt;img\u0026gt;、\u0026lt;audio\u0026gt;、\u0026lt;video\u0026gt;、\u0026lt;script\u0026gt;，没有跨域问题。不过对于这样的外部链接请求不会带上 Cookie。\n对于 JavaScript 发起 HTTP 请求，三要素有任何之一不匹配即是跨域，浏览器即会出于安全考虑进行限制，这时就需要使用 CORS （Cross-origin resource sharing）。CORS 主要由服务器端实现，对用户透明。\n浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n简单请求 简单请求是指满足以下条件的（一般只考虑前面两个条件即可）：\n使用 GET、POST、HEAD 其中一种请求方法。 HTTP的头信息不超出以下几种字段： Accept Accept-Language Content-Language Last-Event-ID Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain 请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。请求中没有使用 ReadableStream 对象。 这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。\n对于简单请求，浏览器直接发起 CORS 请求，具体来说就是服务器端会根据请求头信息中的 Origin 字段（包括了协议 + 域名 + 端口），来决定是否同意这次请求。\n1 2 3 4 5 6 GET /the-target-endpoint HTTP/1.1 Origin: http://www.bob.com Host: api.alice.com Accept-Language: en-US Connection: keep-alive User-Agent: Mozilla/5.0... 如果 Origin 指定的源在许可范围内，服务器返回的响应，会多出几个头信息字段：\n1 2 3 Access-Control-Allow-Origin: http://www.bob.com Access-Control-Allow-Credentials: true Access-Control-Expose-Headers: X-Custom-Header 全部字段参考 CORS。\n如果服务器没有返回相应的头部信息或 Origin 指定的源不在许可范围内，浏览器通过 onerror 抛出错误。此时不能通过 HTTP 状态码来识别请求是否成功。\n非简单请求 非简单请求时指那些对服务器有特殊要求的请求，其实简单请求之外的都是非简单请求了。比如请求方法是 PUT 或 DELETE、Content-Type 的类型是 application/json。\n非简单请求的 CORS 请求，会在正式通信之前，使用 OPTIONS 方法发起一个预检（preflight）请求到服务器，浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest / Fetch 请求，否则就报错。\n下面是一个预检请求的头部：\n1 2 3 4 5 6 7 8 OPTIONS /the-target-endpoint HTTP/1.1 Origin: http://www.bob.com Access-Control-Request-Method: PUT Access-Control-Request-Headers: X-Custom-Header Host: api.alice.com Accept-Language: en-US Connection: keep-alive User-Agent: Mozilla/5.0... 一旦服务器通过了“预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样了。\nCookie CORS 请求一般默认不发送 Cookie，如果服务器端允许 Cookie (即 Access-Control-Allow-Credentials: true) 则可以通过设置 withCredentials=true 来要求浏览器发送 Cookie。\n1 2 3 4 5 6 7 8 const xhr = new XMLHttpRequest(); xhr.withCredentials = true; xhr.send(); // OR fetch(url, { credentials: \u0026#39;include\u0026#39; }).then(...); 注意：服务器端如果要想允许 Cookie，Access-Control-Allow-Origin 就不能是 *，必须指定明确的、与请求网页一致的域名。否则即使指定了 withCredentials=true ，浏览器也不会发送 Cookie。\n思源笔记插件处理 CORS 思源笔记的插件如果有外部资源请求，需要考虑 CORS。桌面版本没有 CORS 问题，移动端或浏览器版有 CORS 问题。\n如果外部资源允许当前 Origin (比如 http://127.0.0.1:6806)，那不需要特殊处理，正常使用 Fetch API 或 XMLHttpRequest API 即可。\n如果外部资源不允许当前 Origin，那么需要使用一个代理来中转请求。代理本身是服务端环境，访问目标资源时没有跨域问题，代理本身则允许当前 Origin。\n思源内部实现了一个 Proxy：/api/network/forwardProxy。详情参考文档。\n思源图床插件 PicGo (siyuan-plugin-picgo)，就支持通过内置的代理处理 CORS 以支持特定的图床服务。\nObsidian 插件处理 CORS Obsidian 插件和思源插件面临同样的情况。Obsidian 提供了 requestUrl 供插件来处理 CORS。\nObsidian 插件 S3 Image Uploader (s3-image-uploader) 和 Imgur (obsidian-imgur-plugin)，就是通过内置的 requestUrl 处理 CORS。\nS3 服务处理 CORS Amazon S3 和 有些 S3 兼容服务是允许在浏览器中直接访问存储桶的，所以支持在存储桶层面设置 CORS 策略。具体可以参考不同服务的官方文档。\n这里以 Cloudflare R2 为例：\n进入 Cloudflare R2 相应的 Bucket 页面。 进入 Settings 标签页并找到 CORS Policy。 点击 \u0026ldquo;Edit CORS policy\u0026rdquo; 进行编辑。以下是允许所有 Origin 访问的例子。更多详情参考官方文档。 1 2 3 4 5 6 7 [ { \u0026#34;AllowedOrigins\u0026#34;: [\u0026#34;*\u0026#34;], \u0026#34;AllowedMethods\u0026#34;: [\u0026#34;GET\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;HEAD\u0026#34;, \u0026#34;DELETE\u0026#34;], \u0026#34;AllowedHeaders\u0026#34;: [\u0026#34;*\u0026#34;] } ] 保存后可以通过 curl 命令进行测试。 1 2 3 4 5 curl -H “Origin: http://127.0.0.1:6806” \\ -H “Access-Control-Request-Method: PUT” \\ -H “Access-Control-Request-Headers: X-Requested-With” \\ -X OPTIONS --verbose \\ https://\u0026lt;prefix\u0026gt;.r2.cloudflarestorage.com/\u0026lt;bucket\u0026gt;/ 没有报错且响应头部包含有 CORS 字段即表示生效。 ","date":"2024-04-13T09:12:12+08:00","permalink":"https://ogr.xyz/p/js-cors/","title":"JavaScript CORS 跨域请求"},{"content":"背景 我的博客是用 Hugo 搭建的，主题是 hugo-theme-stack。经过一段时间的摸索，对 Hugo 和 hugo-theme-stack 都有了一定的了解。\nhugo-theme-stack 简洁大方同时又预留了扩展性，Hugo 构建流水线支持处理 Sass 和 TypeScript/JavaScript。\n说到扩展性，最简单地就是通过自定义 CSS 和 Javascript 来对站点进行美化或改造。hugo-theme-stack 预留了 assets/scss/custom.scss 和 assets/ts/custom.ts 分别用于自定义 CSS 和 TypeScript/JavaScript。\n这里并不谈论如何美化或改造站点，只是记录在此过程中对 Hugo 集成 TypeScript/Javascript，以及页面加载 JavaScript 的一些理解。\nJavaScript 构建 官方文档 基本上包含了所有 TypeScript/JavaScript 处理的内容。\n基本使用方法 以 hugo-theme-stack 主题的代码为例：\n1 2 3 4 {{- $opts := dict \u0026#34;minify\u0026#34; hugo.IsProduction -}} {{- $script := resources.Get \u0026#34;ts/main.ts\u0026#34; | js.Build $opts -}} \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ $script.RelPermalink }}\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 在主题的目录下有 assets/ts/main.ts 文件，主题自身的所有 JavaScript 内容都在这里。\n| 表示管道，跟 Linux Shell 的管道命令类似，| 前面的执行结果做为后面处理的输入，支持任意级联。输入和输出都是 resource.Resource。\nHugo 使用 js.Build 编译和处理 TypeScript / JavaScript 文件。Hugo 本身没有外部依赖，不需要依赖本地环境安装 tsc。也正是如此，Hugo 只支持少量的选项。\n如果没有指定 targetPath 参数，默认使用与输入路径相同的输出路径，比如这个例子会输入到 public/ts/main.js。这个例子对于生产环境还会压缩生成的 JS 文件。需要注意 target 选项的默认值是 esnext，基本上不会对 JS 语法做任何转译了。如果有兼容性考虑的话，Hugo 也支持 Babel。个人博客没有兼容性考量，使用默认设置即可。\n最终在HTML页面上是这样的：\n1 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/ts/main.js\u0026#34; defer\u0026gt; 主题自身的 JS 内容一般不会有变化，这样的结果不会有什么。但是对于自定义 JS 可能就有问题了。\n1 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/ts/custom.js\u0026#34; defer\u0026gt; 在美化或改造站点的过程中，免不了要引入 JS 代码。因为URL始终保持不变，这样在发布的时候就可能会有浏览器缓存问题。解决这个问题的方法就是在 JS 文件名上添加哈希值，这样每次内容变化都会导致 URL 变化，就不会有缓存问题了。同时还能用 integrity 属性增强安全性。\n1 2 3 {{- $script := resources.Get \u0026#34;ts/custom.ts\u0026#34; | js.Build $opts | fingerprint -}} \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ $script.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $script.Data.Integrity }}\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 最终在HTML页面上是这样的：\n1 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/ts/custom.f674679881e30bf214f10acf02f08fb4109e73dab259b4654b247ec11e1fd4c1.js\u0026#34; integrity=\u0026#34;sha256-9nRnmIHjC/IU8QrPAvCPtBCec9qyWbRlSyR\u0026amp;#43;wR4f1ME=\u0026#34; defer\u0026gt; 集成 npm npm 已经是最基础和最广泛使用的 JS 包管理器。如果我们的 TypeScript/JavaScript 代码需要引入第三方依赖，可以使用 npm。\n首先在站点根目录执行 hugo mod npm pack，Hugo 会生成 package.hugo.json。跟使用 package.json 一样，把需要用到的依赖添加进去。 再次执行 hugo mod npm pack，Hugo 会分析并收集所有 Hugo 模块的 package.hugo.json 文件，最终生成 package.json 文件。 接着执行 npm install 或 npm ci 下载依赖到本地 node_modules 目录。 把 package.hugo.json，package.json 和 package-lock.json 都添加到 Git 库。 在 TypeScript/JavaScript 代码里面正常使用 import 即可。例如：import * as React from 'react'。 用 npm ci \u0026amp;\u0026amp; hugo 生成站点并发布。注意构建环境比如 Github Actions 需要安装 Node.js。 HTML SCRIPT 标签 上面讲了如何在 Hugo 项目中使用 JS。这里讲一下对 \u0026lt;script\u0026gt; 标签的理解。\n\u0026lt;script\u0026gt; 有个 type 属性，如果不指定，默认是 type=\u0026quot;text/javascript\u0026quot;，这也是最常用的设置，没有任何兼容性问题。\n内联 1 2 3 \u0026lt;script\u0026gt; // code here \u0026lt;/script\u0026gt; 这种方法一般不使用了，更合理的做法是把 JS 代码归类到合适的 JS 文件里面。\n外联 1 \u0026lt;script src=\u0026#34;https://mydomain.com/x.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 这种方法是最常见的用法。不过这里会阻塞页面渲染，即浏览器解析到这个标签时会立即同步下载和执行引用的 JS 文件，再接着解析后续部分。这就会导致一段时间的空白页面。一般是放到 \u0026lt;body\u0026gt; 的尾部，这样可以减少等待。\n延迟 1 \u0026lt;script src=\u0026#34;https://mydomain.com/x.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 这种方法是最推荐的用法。defer 属性告诉浏览器异步下载引用的 JS 文件，不再阻塞页面解析。页面解析完成且 DOM TREE 就绪时才会执行 JS 文件。如果页面中有多个 defer 文件，会按照在页面中出现的顺序依次执行。\n（啥？你问如果 defer 用于内联是什么情况？答：你为什么要那么做？）\n异步 1 \u0026lt;script src=\u0026#34;https://thirdparty.com/y.js\u0026#34; async\u0026gt;\u0026lt;/script\u0026gt; 这种方法适用于外部 JS 文件，比如监控、统计、追踪用途的 JS。这类 JS 无须操作页面本身的DOM，一般操作 Cookie 以及监听事件。完全异步下载和执行，不会阻塞页面加载过程，不用等待页面加载完成，没有依赖关系，没有顺序要求。\n（啥？你问如果 async 和 defer 同时使用是什么情况？答：你为什么要那么做？）\n内联模块 1 2 3 \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { o } from \u0026#39;x.js\u0026#39;; \u0026lt;/script\u0026gt; 这种方法是 ES6/ES2015 引入的模块语法。只有较新的浏览器才支持 type=\u0026quot;module\u0026quot;，旧版浏览器会忽略这个标签内的内容。\n这里不讲 import 具体用法，一般不这样使用。常见用法是现代 JS 语法编程，并通过打包工具（比如 webpack）将整个页面的 JS 资源转译打包成一个 JS 文件。\n外联模块 1 \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://mydomain.com/x.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 这种用法允许在 x.js 里面嵌套使用 import 语法。但整体而言，这个用法没有为当前作用域引入任何符号。如果 x.js 没有用到 import，就相当于普通地下载并执行这个 JS 文件，和 type=\u0026quot;text/javascript\u0026quot; 一样的效果。\n区别在于：\n只有较新的浏览器才支持 type=\u0026quot;module\u0026quot;。利用这个特性可以为较新的浏览器和老旧浏览器加载不同的 JS 文件。\n1 2 \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://mydomain.com/x.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script nomodule src=\u0026#34;https://mydomain.com/y.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 较新的浏览器能识别 type=\u0026quot;module\u0026quot; 和 nomodule，所以会忽略 y.js，只会使用 x.js。\n老旧浏览器不认识 type=\u0026quot;module\u0026quot;，所以会忽略 x.js，只会使用 y.js 并忽略 nomodule 属性。\n例如：hugo-mod-jslibs/alpinejs。\n如果想要在浏览器引入全局对象，需要在JS模块里面为 window 对象设置相应的属性。\n例如 Alpinejs 和各种 Polyfill。\n","date":"2024-03-19T19:59:41+08:00","permalink":"https://ogr.xyz/p/html-script/","title":"HTML SCRIPT 标签的理解"},{"content":"背景 上篇博文《Garage对象存储的安装和使用》介绍了在 Oracle Cloud 的免费实例上用 Garage 搭建 S3 兼容的对象存储服务。\n实际上 Oracle Cloud 的免费套餐里面还有 20GB 的 S3 兼容的对象存储额度。本着不用白不用的精神，来看看怎么利用起来。\n本博客就是托管于 Cloudflare Pages，图床使用 Oracle 对象存储并使用 Cloudflare Workers 做 CDN 加速。\n相比较用开源项目自行搭建的对象存储服务，云厂商的对象存储服务一般功能更多。OCI Object Storage 的一个优点是可以进行预授权，在存储桶设为私有的情况下，Web 应用程序也可以很方便地通过授权码进行访问。\n（没有测试过是否支持 S3 兼容的访问策略，如果兼容的话，也可以用访问策略实现允许匿名以只读的形式访问。）\n创建存储桶 进入存储桶管理页面。对于免费套餐用户，可以看到提示有 20GB 的免费存储空间额度。\n点击创建存储桶按钮，输入存储桶名称，其它选项用默认即可。我这里的名称为 bucket-oracle-free-20G。\n此时该存储桶还不能被访问。注意可见性设置，如果设置为公共，那么将允许匿名用户和未通过身份验证的用户访问该存储桶中存储的数据，这样是不安全的。建议保持专用，下面会介绍通过 Cloudflare 免费 CDN 访问专用存储桶的资源。\n创建访问密钥 从顶部导航栏的进入我的概要信息。\n从左边的侧边栏进入客户密钥。\n点击生成密钥并输入密钥名称，将生成密钥 (Secret key)，这个只有在创建时能展示明文，需要另外保存下来。\n回到密钥列表，可以看到创建的密钥，其中访问密钥是 Key ID，可以复制明文。\n至此可以使用各种 S3 兼容的客户端和库访问存储桶了。需要注意的点：\nregion 是当前区域，一般在网址里面会有类似于 region=ap-tokyo-1 的参数。 bucket 并不是上面创建存储桶时指定的名称，而是存储桶详情页面的名称空间。 endpoint 参考 OCI Object Storage Dedicated Endpoints，需要在域名后加上存储桶名称。示例：https://compat.objectstorage.ap-tokyo-1.oraclecloud.com/bucket-oracle-free-20G。 S3 客户端得到的 URL 为 https://\u0026lt;namespace\u0026gt;.compat.objectstorage.ap-tokyo-1.oraclecloud.com/bucket-oracle-free-20G/\u0026lt;key\u0026gt;。 创建预先验证的请求 上面已经能用 Key ID 和 Secret key 访问存储桶对象了。对通过 Web 应用访问存储桶的场景有更简单的方法，那就是创建预先验证的请求。预先验证的请求允许访问存储桶对象而不需要提供访问密钥，本质上就是预先生成访问授权码。在使用 Cloudflare Workers 实现 CDN 时会比较方便。\n进入存储桶详情页面，从左边的侧边栏进入预先验证的请求。\n点击创建预先验证的请求。因为是用于 Cloudflare Workers，我这里起名为 Cloudflare-Workers。目标选择存储桶，类型选择允许对象读取，到期时间可以指定一个非常久远的时间以近似实现永不过期。\n之后会生成一个预先验证的请求 URL，授权码就包含在 URL 里面，这个 URL 只有在创建时能展示明文，需要另外保存下来。\nCloudflare Workers Cloudflare 为普通用户提供免费 CDN 服务，非常良心。\n基本上要使用 Cloudflare 服务，需要在 Cloudflare 托管域名。如何购买和托管域名参见网上其它文章。本博客所使用的域名 ogr.xyz 就托管于 Cloudflare。\n常规的 CDN 模式是：用户 -\u0026gt; Cloudflare 服务器 -\u0026gt; Source 服务器。这种方式只需要在 Cloudflare 托管域名，使用 CNAME 并开启代理（点亮小云朵）即可。\n然而对于 Oracle 对象存储，无论可见性是公共还是专用，都无法实现代理。这是因为 Oracle 对象存储的域名里面包含存储桶的 bucket 和 region 信息，Cloudflare 访问源服务器时并不会使用源服务器域名，而是使用 Cloudflare 托管的域名，这样一来 Oracle 服务器就不能正常处理请求了。（企业版订阅用户可以通过规则重写 Host HTTP Header。Cloudflare 解释说普通用户不允许是出于安全考虑。）\n那就只能使用 Cloudflare Workers + Cache 实现 CDN 效果了。\n添加二级域名 进入到域名管理页面，Home -\u0026gt; Websites -\u0026gt; ogr.xyz -\u0026gt; DNS -\u0026gt; Records。\n添加二级域名，类型为 CNAME，名字为 oss，目标为 \u0026lt;namespace\u0026gt;.compat.objectstorage.\u0026lt;region\u0026gt;.oraclecloud.com，默认开启代理。之后 oss.ogr.xyz 的流量会接入到 Cloudflare。\n注意：这里的目标没有实际作用，后续会把流量指向 Worker。\n创建 Worker 进入到 Worker 创建页面，Home -\u0026gt; Workers \u0026amp; Pages。\n点击 Create application -\u0026gt; Create Worker，输入 Worker 名字，我这里用跟域名相同的名字 oss。\n进入到创建的 Worker 管理页面，点击 Edit Code 进入在线编辑器，用以下代码替换。需要修改 OOS_BUCKET_PREAUTH_URL 为你为存储桶创建的预先验证的请求 URL。为防止上传文件时未指定 Content-Type，这段代码使用文件扩展名进行映射。\nconst FileMimeType = { \u0026#39;audio/x-mpeg\u0026#39;: [\u0026#39;mpega\u0026#39;], \u0026#39;video/3gpp\u0026#39;: [\u0026#39;3gpp\u0026#39;, \u0026#39;3gp\u0026#39;], \u0026#39;application/postscript\u0026#39;: [\u0026#39;ps\u0026#39;, \u0026#39;eps\u0026#39;, \u0026#39;ai\u0026#39;], \u0026#39;audio/x-aiff\u0026#39;: [\u0026#39;aiff\u0026#39;], \u0026#39;application/x-aim\u0026#39;: [\u0026#39;aim\u0026#39;], \u0026#39;image/x-jg\u0026#39;: [\u0026#39;art\u0026#39;], \u0026#39;video/x-ms-asf\u0026#39;: [\u0026#39;asx\u0026#39;, \u0026#39;asf\u0026#39;], \u0026#39;audio/basic\u0026#39;: [\u0026#39;ulw\u0026#39;], \u0026#39;video/x-msvideo\u0026#39;: [\u0026#39;avi\u0026#39;], \u0026#39;video/x-rad-screenplay\u0026#39;: [\u0026#39;avx\u0026#39;], \u0026#39;application/x-bcpio\u0026#39;: [\u0026#39;bcpio\u0026#39;], \u0026#39;image/bmp\u0026#39;: [\u0026#39;dib\u0026#39;], \u0026#39;text/html\u0026#39;: [\u0026#39;html\u0026#39;, \u0026#39;htm\u0026#39;, \u0026#39;shtml\u0026#39;], \u0026#39;application/x-cdf\u0026#39;: [\u0026#39;cdf\u0026#39;], \u0026#39;application/pkix-cert\u0026#39;: [\u0026#39;cer\u0026#39;], \u0026#39;application/java\u0026#39;: [\u0026#39;class\u0026#39;], \u0026#39;application/x-cpio\u0026#39;: [\u0026#39;cpio\u0026#39;], \u0026#39;application/x-csh\u0026#39;: [\u0026#39;csh\u0026#39;], \u0026#39;text/css\u0026#39;: [\u0026#39;css\u0026#39;], \u0026#39;application/msword\u0026#39;: [\u0026#39;doc\u0026#39;], \u0026#39;application/xml-dtd\u0026#39;: [\u0026#39;dtd\u0026#39;], \u0026#39;video/x-dv\u0026#39;: [\u0026#39;dv\u0026#39;], \u0026#39;application/x-dvi\u0026#39;: [\u0026#39;dvi\u0026#39;], \u0026#39;application/vnd.ms-fontobject\u0026#39;: [\u0026#39;eot\u0026#39;], \u0026#39;text/x-setext\u0026#39;: [\u0026#39;etx\u0026#39;], \u0026#39;image/gif\u0026#39;: [\u0026#39;gif\u0026#39;], \u0026#39;application/x-gtar\u0026#39;: [\u0026#39;gtar\u0026#39;], \u0026#39;application/x-gzip\u0026#39;: [\u0026#39;gz\u0026#39;], \u0026#39;application/x-hdf\u0026#39;: [\u0026#39;hdf\u0026#39;], \u0026#39;application/mac-binhex40\u0026#39;: [\u0026#39;hqx\u0026#39;], \u0026#39;text/x-component\u0026#39;: [\u0026#39;htc\u0026#39;], \u0026#39;image/ief\u0026#39;: [\u0026#39;ief\u0026#39;], \u0026#39;text/vnd.sun.j2me.app-descriptor\u0026#39;: [\u0026#39;jad\u0026#39;], \u0026#39;application/java-archive\u0026#39;: [\u0026#39;jar\u0026#39;, \u0026#39;war\u0026#39;, \u0026#39;ear\u0026#39;], \u0026#39;text/x-java-source\u0026#39;: [\u0026#39;java\u0026#39;], \u0026#39;application/x-java-jnlp-file\u0026#39;: [\u0026#39;jnlp\u0026#39;], \u0026#39;image/jpeg\u0026#39;: [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;], \u0026#39;application/javascript\u0026#39;: [\u0026#39;js\u0026#39;], \u0026#39;text/plain\u0026#39;: [\u0026#39;txt\u0026#39;], \u0026#39;application/json\u0026#39;: [\u0026#39;json\u0026#39;], \u0026#39;audio/midi\u0026#39;: [\u0026#39;midi\u0026#39;, \u0026#39;mid\u0026#39;, \u0026#39;kar\u0026#39;], \u0026#39;application/x-latex\u0026#39;: [\u0026#39;latex\u0026#39;], \u0026#39;audio/x-mpegurl\u0026#39;: [\u0026#39;m3u\u0026#39;], \u0026#39;image/x-macpaint\u0026#39;: [\u0026#39;pnt\u0026#39;], \u0026#39;text/troff\u0026#39;: [\u0026#39;tr\u0026#39;], \u0026#39;application/mathml+xml\u0026#39;: [\u0026#39;mathml\u0026#39;], \u0026#39;application/x-mif\u0026#39;: [\u0026#39;mif\u0026#39;], \u0026#39;video/quicktime\u0026#39;: [\u0026#39;qt\u0026#39;], \u0026#39;video/x-sgi-movie\u0026#39;: [\u0026#39;movie\u0026#39;], \u0026#39;audio/mpeg\u0026#39;: [\u0026#39;mpa\u0026#39;], \u0026#39;video/mp4\u0026#39;: [\u0026#39;mp4\u0026#39;, \u0026#39;m4v\u0026#39;], \u0026#39;video/mpeg\u0026#39;: [\u0026#39;mpg\u0026#39;, \u0026#39;mpeg\u0026#39;], \u0026#39;video/mpeg2\u0026#39;: [\u0026#39;mpv2\u0026#39;], \u0026#39;application/x-wais-source\u0026#39;: [\u0026#39;src\u0026#39;], \u0026#39;application/x-netcdf\u0026#39;: [\u0026#39;nc\u0026#39;], \u0026#39;application/oda\u0026#39;: [\u0026#39;oda\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.database\u0026#39;: [\u0026#39;odb\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.chart\u0026#39;: [\u0026#39;odc\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.formula\u0026#39;: [\u0026#39;odf\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.graphics\u0026#39;: [\u0026#39;odg\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.image\u0026#39;: [\u0026#39;odi\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.text-master\u0026#39;: [\u0026#39;odm\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.presentation\u0026#39;: [\u0026#39;odp\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.spreadsheet\u0026#39;: [\u0026#39;ods\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.text\u0026#39;: [\u0026#39;odt\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.graphics-template\u0026#39;: [\u0026#39;otg\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.text-web\u0026#39;: [\u0026#39;oth\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.presentation-template\u0026#39;: [\u0026#39;otp\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.spreadsheet-template\u0026#39;: [\u0026#39;ots\u0026#39;], \u0026#39;application/vnd.oasis.opendocument.text-template\u0026#39;: [\u0026#39;ott\u0026#39;], \u0026#39;application/ogg\u0026#39;: [\u0026#39;ogx\u0026#39;], \u0026#39;video/ogg\u0026#39;: [\u0026#39;ogv\u0026#39;], \u0026#39;audio/ogg\u0026#39;: [\u0026#39;spx\u0026#39;], \u0026#39;application/x-font-opentype\u0026#39;: [\u0026#39;otf\u0026#39;], \u0026#39;audio/flac\u0026#39;: [\u0026#39;flac\u0026#39;], \u0026#39;application/annodex\u0026#39;: [\u0026#39;anx\u0026#39;], \u0026#39;audio/annodex\u0026#39;: [\u0026#39;axa\u0026#39;], \u0026#39;video/annodex\u0026#39;: [\u0026#39;axv\u0026#39;], \u0026#39;application/xspf+xml\u0026#39;: [\u0026#39;xspf\u0026#39;], \u0026#39;image/x-portable-bitmap\u0026#39;: [\u0026#39;pbm\u0026#39;], \u0026#39;image/pict\u0026#39;: [\u0026#39;pict\u0026#39;], \u0026#39;application/pdf\u0026#39;: [\u0026#39;pdf\u0026#39;], \u0026#39;image/x-portable-graymap\u0026#39;: [\u0026#39;pgm\u0026#39;], \u0026#39;audio/x-scpls\u0026#39;: [\u0026#39;pls\u0026#39;], \u0026#39;image/png\u0026#39;: [\u0026#39;png\u0026#39;], \u0026#39;image/x-portable-anymap\u0026#39;: [\u0026#39;pnm\u0026#39;], \u0026#39;image/x-portable-pixmap\u0026#39;: [\u0026#39;ppm\u0026#39;], \u0026#39;application/vnd.ms-powerpoint\u0026#39;: [\u0026#39;pps\u0026#39;], \u0026#39;image/vnd.adobe.photoshop\u0026#39;: [\u0026#39;psd\u0026#39;], \u0026#39;image/x-quicktime\u0026#39;: [\u0026#39;qtif\u0026#39;], \u0026#39;image/x-cmu-raster\u0026#39;: [\u0026#39;ras\u0026#39;], \u0026#39;application/rdf+xml\u0026#39;: [\u0026#39;rdf\u0026#39;], \u0026#39;image/x-rgb\u0026#39;: [\u0026#39;rgb\u0026#39;], \u0026#39;application/vnd.rn-realmedia\u0026#39;: [\u0026#39;rm\u0026#39;], \u0026#39;application/rtf\u0026#39;: [\u0026#39;rtf\u0026#39;], \u0026#39;text/richtext\u0026#39;: [\u0026#39;rtx\u0026#39;], \u0026#39;application/font-sfnt\u0026#39;: [\u0026#39;sfnt\u0026#39;], \u0026#39;application/x-sh\u0026#39;: [\u0026#39;sh\u0026#39;], \u0026#39;application/x-shar\u0026#39;: [\u0026#39;shar\u0026#39;], \u0026#39;application/x-stuffit\u0026#39;: [\u0026#39;sit\u0026#39;], \u0026#39;application/x-sv4cpio\u0026#39;: [\u0026#39;sv4cpio\u0026#39;], \u0026#39;application/x-sv4crc\u0026#39;: [\u0026#39;sv4crc\u0026#39;], \u0026#39;image/svg+xml\u0026#39;: [\u0026#39;svgz\u0026#39;], \u0026#39;application/x-shockwave-flash\u0026#39;: [\u0026#39;swf\u0026#39;], \u0026#39;application/x-tar\u0026#39;: [\u0026#39;tar\u0026#39;], \u0026#39;application/x-tcl\u0026#39;: [\u0026#39;tcl\u0026#39;, \u0026#39;tk\u0026#39;], \u0026#39;application/x-tex\u0026#39;: [\u0026#39;tex\u0026#39;], \u0026#39;application/x-texinfo\u0026#39;: [\u0026#39;texinfo\u0026#39;], \u0026#39;image/tiff\u0026#39;: [\u0026#39;tiff\u0026#39;, \u0026#39;tif\u0026#39;], \u0026#39;text/tab-separated-values\u0026#39;: [\u0026#39;tsv\u0026#39;], \u0026#39;application/x-font-ttf\u0026#39;: [\u0026#39;ttf\u0026#39;], \u0026#39;application/x-ustar\u0026#39;: [\u0026#39;ustar\u0026#39;], \u0026#39;application/voicexml+xml\u0026#39;: [\u0026#39;vxml\u0026#39;], \u0026#39;image/x-xbitmap\u0026#39;: [\u0026#39;xbm\u0026#39;], \u0026#39;application/xhtml+xml\u0026#39;: [\u0026#39;xhtml\u0026#39;], \u0026#39;application/vnd.ms-excel\u0026#39;: [\u0026#39;xls\u0026#39;], \u0026#39;application/xml\u0026#39;: [\u0026#39;xsl\u0026#39;], \u0026#39;image/x-xpixmap\u0026#39;: [\u0026#39;xpm\u0026#39;], \u0026#39;application/xslt+xml\u0026#39;: [\u0026#39;xslt\u0026#39;], \u0026#39;application/vnd.mozilla.xul+xml\u0026#39;: [\u0026#39;xul\u0026#39;], \u0026#39;image/x-xwindowdump\u0026#39;: [\u0026#39;xwd\u0026#39;], \u0026#39;application/vnd.visio\u0026#39;: [\u0026#39;vsd\u0026#39;], \u0026#39;audio/x-wav\u0026#39;: [\u0026#39;wav\u0026#39;], \u0026#39;image/vnd.wap.wbmp\u0026#39;: [\u0026#39;wbmp\u0026#39;], \u0026#39;text/vnd.wap.wml\u0026#39;: [\u0026#39;wml\u0026#39;], \u0026#39;application/vnd.wap.wmlc\u0026#39;: [\u0026#39;wmlc\u0026#39;], \u0026#39;text/vnd.wap.wmlsc\u0026#39;: [\u0026#39;wmls\u0026#39;], \u0026#39;application/vnd.wap.wmlscriptc\u0026#39;: [\u0026#39;wmlscriptc\u0026#39;], \u0026#39;video/x-ms-wmv\u0026#39;: [\u0026#39;wmv\u0026#39;], \u0026#39;application/font-woff\u0026#39;: [\u0026#39;woff\u0026#39;], \u0026#39;application/font-woff2\u0026#39;: [\u0026#39;woff2\u0026#39;], \u0026#39;model/vrml\u0026#39;: [\u0026#39;wrl\u0026#39;], \u0026#39;application/wspolicy+xml\u0026#39;: [\u0026#39;wspolicy\u0026#39;], \u0026#39;application/x-compress\u0026#39;: [\u0026#39;z\u0026#39;], \u0026#39;application/zip\u0026#39;: [\u0026#39;zip\u0026#39;], }; const fileMimeType = {} for (let k in FileMimeType) { FileMimeType[k].forEach(ext =\u0026gt; { fileMimeType[ext] = k; }); } // 预先验证的请求 URL const OOS_BUCKET_PREAUTH_URL = \u0026#39;\u0026lt;你创建的预先验证的请求 URL\u0026gt;\u0026#39;; const preAuthURL = new URL(OOS_BUCKET_PREAUTH_URL); export default { async fetch(request, env, ctx) { const url = new URL(request.url); const host = url.host url.host = preAuthURL.host; url.pathname = preAuthURL.pathname + url.pathname.substring(1); const newRequest = new Request(url, request); newRequest.headers.set(\u0026#39;X-Forwarded-Host\u0026#39;, host) const response = await fetch(newRequest); let contentType = response.headers.get(\u0026#39;Content-Type\u0026#39;); if (contentType \u0026amp;\u0026amp; contentType != \u0026#39;application/octet-stream\u0026#39;) { return response } const newResponse = new Response(response.body, { headers: response.headers, status: response.status, statusText: response.statusText, }); const ext = url.pathname.split(\u0026#39;.\u0026#39;).pop(); contentType = fileMimeType[ext]; if (contentType) { newResponse.headers.set(\u0026#39;Content-Type\u0026#39;, contentType); } return newResponse }, }; 将二级域名指向 Worker 进入到创建的 Worker 管理页面，Settings -\u0026gt; Add route。\nRoute 填 oos.ogr.xyz/*，Zone 选 ogr.xyz。这样就把 oos.ogr.xyz 的所有请求路由到当前 Worker。\n开启缓存 进入到规则管理页面，Home -\u0026gt; Websites -\u0026gt; ogr.xyz -\u0026gt; Rules -\u0026gt; Page Rules。\n点击 Create Page Rule。\nURL 填 oos.ogr.xyz/*, Pick a Setting 选 Cache Level，Select Cache Level 选 Cache Everything。这样所有 oos.ogr.xyz 请求的响应都会被缓存，就达到 CDN 的效果了。\n使用方法 至此，所有的准备工作就完成了，对于上传至存储桶的文件，可以通过 https://oos.ogr.xyz/\u0026lt;key\u0026gt; 访问到了。\n对于使用 VS Code 写 Markdown 的用户，推荐 Markdown Image 插件。该插件以粘贴的形式自动上传至云服务并生成可访问链接。详情可参见插件说明。\nMarkdown Image 插件实际使用配置如下：\n1 2 3 4 5 6 7 8 9 10 \u0026#34;markdown-image.base.uploadMethod\u0026#34;: \u0026#34;S3\u0026#34;, \u0026#34;markdown-image.s3.endpoint\u0026#34;: \u0026#34;https://compat.objectstorage.ap-tokyo-1.oraclecloud.com/bucket-oracle-free-20G\u0026#34;, \u0026#34;markdown-image.s3.region\u0026#34;: \u0026#34;ap-tokyo-1\u0026#34;, \u0026#34;markdown-image.s3.bucketName\u0026#34;: \u0026#34;\u0026lt;名称空间\u0026gt;\u0026#34;, \u0026#34;markdown-image.s3.accessKeyId\u0026#34;: \u0026#34;\u0026lt;Key ID\u0026gt;\u0026#34;, \u0026#34;markdown-image.s3.secretAccessKey\u0026#34;: \u0026#34;\u0026lt;Secret key\u0026gt;\u0026#34;, \u0026#34;markdown-image.s3.cdn\u0026#34;: \u0026#34;https://oos.ogr.xyz/${filepath}\u0026#34;, \u0026#34;markdown-image.s3.config\u0026#34;: { \u0026#34;forcePathStyle\u0026#34;: false, } 总结 对象存储一般要搭配 CDN 一起使用。为了免费使用 Cloudflare CDN，上述步骤略显复杂。\n其实如果已经在使用 Cloudflare Pages 托管博客了，那不妨直接使用 Cloudflare R2 对象存储：有 10G 的免费存储额度，配置简单，自带 CDN 支持，个人博客用户基本够用。\n","date":"2024-03-15T20:47:04+08:00","permalink":"https://ogr.xyz/p/oracle-object-storage/","title":"Oracle 免费对象存储使用 Cloudflare 做 CDN"},{"content":"背景 前几年 Oracle Cloud 云服务推出的时候，申请了日区（ap-tokyo-1）永久免费资源。包括免费主机和共计 200GB 的块存储额度。\n闲来无事，整理一下：保留一台 Ubuntu Linux 实例，实例初始存储空间 50G 本地磁盘，剩余 150G 额度创建一个块存储卷通过iSCSI挂载到实例上。\n实例配置: 1 OCPU，1GB Mem，0.48Gbps Bandwidth，整体性能一般，当然能免费使用也没什么可说的。\n创建好实例并装好 Docker 后一直没什么实际用处，有段时间用来挂载小雅Alist看视频。\n最近心血来潮来折腾个人博客。调查了一番之后选择用 Hugo + Markdown 生成静态博客。如何搭建静态博客暂且不表，其中涉及到图片等资源如何存储的问题。图片可以选择跟博客内容一起发布和托管，但这不符合折腾的精神。必须要搞一个图床！另一个好处时如果文章要同步发布到多个平台时不需要处理图片链接问题。\n关于图床，有一些自托管部署的开源项目，但目前以 S3 为代表的对象存储被广泛应用，非常适合用于搭建图床。各大云服务商都有推出自己的对象存储服务，有的有免费存储空间额度。但是一般免费额度都比较小，一般在 20G 以下。考虑到 Oracle 免费实例上有 150G 的存储空间，那有没有可以自己搭建的 S3 兼容的开源项目呢？\n那必须是有的，比较流行的是 Ceph 和 Minio。Ceph 生态庞大但是比较重量级，不适合个人用户。Minio 对 S3 的兼容性最好，支持用 Docker 部署单实例使用，部署和使用都很简单。在实例上安装体验了一下，发现即使没存储内容时也很容易把内存占满，所以只能放弃了。\n经过一番搜索后，看到有人推荐比 Minio 更轻量级的开源项目 Garage。Garage 是一个法国团队开发的 S3 兼容的对象存储，比较小众没什么知名度，网上的资料也比较少。这里记录一下 Garage 的安装和使用。Garage 的介绍可以参考官方文档，文档比较简明扼要，全读一遍也费不了多少时间。\n准备 我用 Linuxserver.io 的 SWAG (Secure Web Application Gateway) Docker 镜像在实例上安装 Nginx 环境。其中需要购入一个域名，这里以 mydomin.com 指代。SWAG 配置好域名服务商的认证信息后可以自动申请和管理 Let\u0026rsquo;s Encrypt SSL 证书。非常适合个人使用。详细的安装使用说明参考官方文档。\nDocker 创建一个名字为 lsio 的 Bridge 类型的网络，所有 Docker 容器都使用这个网络，这样就可以通过容器名称相互访问。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 docker run -d \\ --name=swag \\ --cap-add=NET_ADMIN \\ -e PUID=$(id -u) \\ -e PGID=$(id -u) \\ -e TZ=Asia/Singapore \\ -e URL=mydomain.com \\ -e \u0026#39;SUBDOMAINS=\\*,\\*.web-garage\u0026#39; \\ -e VALIDATION=dns \\ -e DNSPLUGIN=aliyun \\ -e EMAIL=myaliyunemail@gmail.com \\ -p 443:443 \\ -v /etc/swag:/config \\ --restart always \\ --net=lsio \\ --dns-search=. \\ lscr.io/linuxserver/swag:latest 这里我使用的是阿里云托管域名。并且指定用通配符为所有二级域名 *.mydomain.com 和所有三级域名 *.web-garage.mydomain.com 申请SSL证书。\n在虚拟云网络里面添加入站规则，确保 443 端口能被公网访问。\n安装 Garage 个人使用的话用 Docker 镜像安装单实例即可。\n准备配置文件 这里配置文件路径为 /etc/garage/garage.toml。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 metadata_dir = \u0026#34;/var/lib/garage/meta\u0026#34; data_dir = \u0026#34;/var/lib/garage/data\u0026#34; db_engine = \u0026#34;lmdb\u0026#34; replication_mode = \u0026#34;none\u0026#34; compression_level = 2 rpc_bind_addr = \u0026#34;[::]:3901\u0026#34; rpc_public_addr = \u0026#34;127.0.0.1:3901\u0026#34; rpc_secret = \u0026#34;$(openssl rand -hex 32)\u0026#34; [s3_api] s3_region = \u0026#34;garage\u0026#34; api_bind_addr = \u0026#34;[::]:3900\u0026#34; root_domain = \u0026#34;.s3-garage.mydomain.com\u0026#34; [s3_web] bind_addr = \u0026#34;[::]:3902\u0026#34; root_domain = \u0026#34;.web-garage.mydomain.com\u0026#34; index = \u0026#34;index.html\u0026#34; 其中 rpc_secret 可以用 openssl rand -hex 32 生成，3901 是集群节点内部通信访问端口，3900 是 S3 API 访问端口，Garage 不支持访问策略，所以使用 S3 API 时必须要使用 Secret Key 访问和操作 Bucket。也就是说无法在浏览器中通过 https://\u0026lt;bucket\u0026gt;.s3-garage.mydomain.com/\u0026lt;key\u0026gt; 或 https://s3-garage.mydomain.com/\u0026lt;bucket\u0026gt;/\u0026lt;key\u0026gt; 访问内容。\n那要如何在公网匿名访问内容呢？那就得要用到 3902 端口了，这里指的是 Garage 支持托管静态网站，比如说把 Hugo 站点上传到 Garage Bucket，就可以通过 https://\u0026lt;bucket\u0026gt;.web-garage.mydomain.com 访问网站了。那已知 Object Key 的情况下就可以通过 https://\u0026lt;bucket\u0026gt;.web-garage.mydomain.com/\u0026lt;key\u0026gt; 变相访问任意文件了。\n创建容器 1 2 3 4 5 6 7 8 docker run -d \\ --name garaged \\ --restart always \\ --network lsio \\ -v /etc/garage/garage.toml:/etc/garage.toml \\ -v /mnt/iscsi/garage/meta:/var/lib/garage/meta \\ -v /mnt/iscsi/garage/data:/var/lib/garage/data \\ dxflrs/garage:v0.9.3 其中 /mnt/iscsi 是块存储卷的挂载路径，在此创建 Garage 的 meta 和 data 目录。为了安全起见，不映射任何公开端口，统一用域名走 Nginx HTTPS 443 端口访问。\n至此，容器就跑起来了。容器内部不包含 SHELL 程序，不能使用 docker exec -it garaged /bin/sh 进行交互式访问。需要使用 docker exec garaged /garage，所有的命令都可以用 --help 自解释。\n可以用 docker logs garaged -f 查看日志。\n可以用 docker exec garaged /garage status 查看节点状态。下面的步骤会用到当前节点 ID。\n初始化节点 在使用之前需要先初始化节点，即配置当前节点的区域和存储空间信息。\n方法：\n1 docker exec garaged /garage layout assign -z \u0026lt;zone\u0026gt; -c \u0026lt;capacity\u0026gt; \u0026lt;NODE ID\u0026gt; 示例：\n1 docker exec garaged /garage layout assign -z jp -c 50G aabf22f2b4bc9a1b 最后需要使用上述配置生效。\n1 docker exec garaged /garage layout apply --version=1 对于新的配置需要指定 --version 参数，在之前的版本号基础上 +1，因为是新创建的节点，版本号相当于 0，所以这里是 --version=1。\n再使用 garage status 查看状态信息。\n至此，当前节点初始化完成，可以创建存储桶（Bucket）和访问密钥（Key）了。\n初始化存储桶 创建 Bucket 很简单，指定 bucket name 就可以了。\n1 docker exec garaged /garage bucket create blog 这里创建了一个名为 blog 的 Bucket。\n可以用下列命令检查 Bucket 状态。\n1 2 docker exec garaged /garage bucket list docker exec garaged /garage bucket info blog 要访问上述创建的 Bucket，还需要先创建 API Key。一个 Key 可以配置为访问多个 Bucket，一个 Bucket 可以被多个 Key 访问。\n1 docker exec garaged /garage key create blog-app-key 这里创建一个名为 blog-app-key 的访问密钥，记录下输出的 Key ID 和 Secret key。\n可以用下列命令检查 Key 状态。\n1 2 docker exec garaged /garage key list docker exec garaged /garage key info blog-app-key 接下来授权 Key 访问 Bucket。\n1 2 3 4 5 6 docker exec garaged /garage bucket allow \\ --read \\ --write \\ --owner \\ blog \\ --key blog-app-key 至此可以使用各种 S3 兼容的客户端和库访问存储桶了。需要注意的点：\nregion 固定为 garage。 需要配置 force_path_style=true，以使用 https://s3-garage.mydomain.com/\u0026lt;bucket\u0026gt; 的形式，而不是 https://\u0026lt;bucket\u0026gt;.s3-garage.mydomain.com。后者需要为每个桶都要配置域名。 最后要允许存储桶能被公开匿名访问。Garage 不支持访问策略，只能通过静态网站托管来间接实现。\n1 docker exec garaged /garage bucket website --allow blog 至此，只需要添加域名 blog.web-garage.mydomain.com 就可以访问 blog 桶里面的文件了。访问方式：https://blog.web-garage.mydomain.com/\u0026lt;key\u0026gt;。\n最终用 garage status 查看信息时是这样的。\n使用 Garage 添加子域名 上述步骤提及到三个域名：s3-garage.mydomain.com、web-garage.mydomain.com、blog.web-garage.mydomain.com。其中 web-garage.mydomain.com 并不会实际使用到。\n在域名托管商为 mydomain.com 添加两个子域名 s3-garage.mydomain.com 和 blog.web-garage.mydomain.com，都指向当前实例的公网IP。\nNginx 反向代理 在 SWAG 容器的 /config/swag/nginx/proxy-confs 目录下创建以下两个文件，然后重启容器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # s3-garage.subdomain.conf server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name s3-garage.mydomain.com; include /config/nginx/ssl.conf; client_max_body_size 0; location / { include /config/nginx/proxy.conf; include /config/nginx/resolver.conf; set $upstream_app garaged; set $upstream_port 3900; set $upstream_proto http; proxy_pass $upstream_proto://$upstream_app:$upstream_port; # Disable buffering to a temporary file. proxy_max_temp_file_size 0; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # web-garage.subdomain.conf server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name *.web-garage.mydomain.com; include /config/nginx/ssl.conf; client_max_body_size 0; location / { include /config/nginx/proxy.conf; include /config/nginx/resolver.conf; set $upstream_app garaged; set $upstream_port 3902; set $upstream_proto http; proxy_pass $upstream_proto://$upstream_app:$upstream_port; } } 之后就可以通过 https://s3-garage.mydomain.com 和 https://blog.web-garage.mydomain.com 访问 Garage 了。\n客户端工具 可以和 Garage 集成的工具：\nawscli minio-client s3cmd rclone alist Cyberduck WinSCP Cloudflare Workers 里面推荐使用 aws4fetch 库。\n对于使用 VS Code 写 Markdown 的用户，推荐 Markdown Image 插件。该插件以粘贴的形式自动上传至云服务并生成可访问链接。详情可参见插件说明。\nMarkdown Image 插件实际使用配置如下：\n1 2 3 4 5 6 7 8 9 10 \u0026#34;markdown-image.base.uploadMethod\u0026#34;: \u0026#34;S3\u0026#34;, \u0026#34;markdown-image.s3.endpoint\u0026#34;: \u0026#34;https://s3-garage.mydomain.com\u0026#34;, \u0026#34;markdown-image.s3.region\u0026#34;: \u0026#34;garage\u0026#34;, \u0026#34;markdown-image.s3.bucketName\u0026#34;: \u0026#34;blog\u0026#34;, \u0026#34;markdown-image.s3.accessKeyId\u0026#34;: \u0026#34;\u0026lt;Key ID\u0026gt;\u0026#34;, \u0026#34;markdown-image.s3.secretAccessKey\u0026#34;: \u0026#34;\u0026lt;Secret key\u0026gt;\u0026#34;, \u0026#34;markdown-image.s3.cdn\u0026#34;: \u0026#34;https://blog.web-garage.mydomain.com/${filepath}\u0026#34;, \u0026#34;markdown-image.s3.config\u0026#34;: { \u0026#34;forcePathStyle\u0026#34;: true, } 总结 个人用户自建 S3 存储可以突破云厂商的免费额度限制，在国内的环境下还可以避免被恶意刷流量。并且 S3 已经是对象存储的事实标准，将来如果想要迁移到其他地方也是非常方便的。\n对于 Garage、Minio 这种开源项目，更加倾向于简洁性，包括简单的架构，简单的部署和维护。那么自然地就不可能有极致的性能了，比如说高吞吐和大量小文件的场景就会有瓶颈。当然个人用户一般也没有极致的性能需求。\nMinio 是 Go 语言实现的，知名度较高，生态也比较丰富，使用也比较方便。\nGarage 是 Rust 语言实现的，相较而言比较小众，更谈不上生态，自身甚至不包括 WebUI 管理界面。\n但如果你想在一台性能较弱的主机上部署 S3 兼容服务，那 Garage 或许是个不错的选择。\n","date":"2024-03-14T13:35:17+08:00","image":"https://ogr.xyz/p/garage-setup/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://ogr.xyz/p/garage-setup/","title":"Garage 对象存储的安装和使用"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibili Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-12T00:00:00Z","image":"https://ogr.xyz/p/rich-content/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://ogr.xyz/p/rich-content/","title":"Rich Content"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image Gallery Gallery grammer comes from Typlog. Try to click on any images.\nInline shortcode The Van de Graaf Canon\nEmoji Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } Math Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://ogr.xyz/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://ogr.xyz/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]